name: 🚀 Release
on:
  workflow_dispatch:

env:
  GO_VERSION: 1.23
  BUN_VERSION: 1.1.30
  PROJECT_NAME: jxscout
  ZIG_VERSION: 0.11.0

jobs:
  release:
    name: Release
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Set up Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Get version
        id: get_version
        run: echo "VERSION=$(grep 'const Version =' pkg/constants/version.go | awk '{print $4}' | tr -d '"')" >> $GITHUB_OUTPUT

      - name: Build for multiple platforms
        run: |
          echo "🚀 Starting build process for multiple platforms..."
          echo "📦 Project: ${{ env.PROJECT_NAME }}"
          echo "📋 Version: ${{ steps.get_version.outputs.VERSION }}"
          echo "🔧 Go version: ${{ env.GO_VERSION }}"
          echo "🔧 Zig version: ${{ env.ZIG_VERSION }}"

          # Create dist directory if it doesn't exist
          mkdir -p dist

          # Function to build for a specific platform
          build_platform() {
            local platform=$1
            local os=$2
            local arch=$3
            local target=$4
            local output_name=$5
            
            echo "🔨 Building for $platform ($os/$arch)..."
            echo "🎯 Target: $target"
            echo "📝 Output: $output_name"
            
            # Set framework paths for macOS builds
            if [[ $os == "darwin" ]]; then
              # Get the SDK path
              SDK_PATH=$(xcrun --show-sdk-path)
              echo "📦 Using macOS SDK at: $SDK_PATH"
              
              export CGO_CFLAGS="-I$SDK_PATH/System/Library/Frameworks/CoreFoundation.framework/Headers -I$SDK_PATH/System/Library/Frameworks/Security.framework/Headers"
              export CGO_LDFLAGS="-F$SDK_PATH/System/Library/Frameworks -framework CoreFoundation -framework Security"
              
              # Print the environment for debugging
              echo "🔧 CGO_CFLAGS: $CGO_CFLAGS"
              echo "🔧 CGO_LDFLAGS: $CGO_LDFLAGS"
            fi
            
            CGO_ENABLED=1 GOOS=$os GOARCH=$arch CC="zig cc -target $target" CXX="zig c++ -target $target" go build -v -o "dist/${{ env.PROJECT_NAME }}_${{ steps.get_version.outputs.VERSION }}_${platform}/${output_name}" cmd/jxscout/main.go
            
            if [ $? -eq 0 ]; then
              echo "✅ Successfully built for $platform"
            else
              echo "❌ Failed to build for $platform"
              exit 1
            fi
          }

          # Linux builds
          build_platform "linux_386" "linux" "386" "x86-linux" "jxscout"
          build_platform "linux_amd64" "linux" "amd64" "x86_64-linux" "jxscout"
          build_platform "linux_arm64" "linux" "arm64" "aarch64-linux" "jxscout"

          # macOS builds
          build_platform "macOS_amd64" "darwin" "amd64" "x86_64-macos" "jxscout"
          build_platform "macOS_arm64" "darwin" "arm64" "aarch64-macos" "jxscout"

          # Windows builds
          build_platform "windows_amd64" "windows" "amd64" "x86_64-windows" "jxscout.exe"
          build_platform "windows_arm64" "windows" "arm64" "aarch64-windows" "jxscout.exe"

          echo "🎉 All builds completed successfully!"

      - name: Create ZIP archives
        run: |
          cd dist
          for dir in ${{ env.PROJECT_NAME }}_*; do
            zip -r "${dir}.zip" "$dir"
            rm -rf "$dir"
          done

      - name: Generate checksums
        run: |
          cd dist
          shasum -a 256 ${{ env.PROJECT_NAME }}_${{ steps.get_version.outputs.VERSION }}_linux_*.zip > ${{ env.PROJECT_NAME }}-linux-checksums.txt
          shasum -a 256 ${{ env.PROJECT_NAME }}_${{ steps.get_version.outputs.VERSION }}_macOS_*.zip > ${{ env.PROJECT_NAME }}-mac-checksums.txt
          shasum -a 256 ${{ env.PROJECT_NAME }}_${{ steps.get_version.outputs.VERSION }}_windows_*.zip > ${{ env.PROJECT_NAME }}-windows-checksums.txt

      - name: Create source archives
        run: |
          git archive --format=zip --output=dist/${{ env.PROJECT_NAME }}_${{ steps.get_version.outputs.VERSION }}_source.zip HEAD
          git archive --format=tar.gz --output=dist/${{ env.PROJECT_NAME }}_${{ steps.get_version.outputs.VERSION }}_source.tar.gz HEAD

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
